# https://www.acmicpc.net/problem/1904
# Dynamic Programming / 점화식 recurrence relation(or 재귀식) 을 사용한다.
# 점화식이란, 간단히 하자면 프로그래밍에서 재귀에서의 규칙성을 발견하여 활용하는 것이다. https://namu.wiki/w/%EC%A0%90%ED%99%94%EC%8B%9D
# 재귀함수 https://namu.wiki/w/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98

# 첫 번째 줄에 지원이가 만들 수 있는 길이가 N인 모든 2진 수열의 개수를 15746으로 나눈 나머지를 출력한다.

N = int(input())
dp = [0] * 1000001  # 1,000,000 범위이기 때문에 0 을 포함해서 1000001개의 자리를 확보해준다.
dp[1], dp[2] = 1, 2  # 1, 2의 경우는 기준이 되므로 미리 선언해준다.

# 규칙이 있다 n인경우 갯수 = (n-1인경우 갯수 + n-2인경우 갯수) 의 종류의 합이 되기 때문이다. 1,2의 경우만 제외하고 말이다.
for i in range(3, N + 1):
    print(f'dp[{i}],dp[{i-1}],dp[{i-2}]')
    # dp[1], dp[2]를 기준으로 각 계산을 반복해서 값을 추린다.
    dp[i] = (dp[i - 1] + dp[i - 2]) % 15746  # 수시로 15746의 값을 나눠줘야 메모리관리가 된다.
    # N+1을 했기때문에 출력값은 dp[N]을 하면된다.

print(dp[N])
